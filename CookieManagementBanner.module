<?php

/**
 *
 * GDPR cookie management banner
 * by Adrian Jones, Oliver Walker, and David Miller
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class CookieManagementBanner extends WireData implements Module {

    public static function getModuleInfo() {
        return array(
            'title'    => 'Cookie Management Banner',
            'summary'  => __('Cookie management banner allows users to manage tracking cookies.'),
            'author'   => 'Adrian Jones and Oliver Walker',
            'href'     => 'https://processwire.com/talk/topic/19525-cookie-management-banner/',
            'version'  => '0.3.2',
            'autoload' => true,
            'singular' => true
        );
    }

    public function init() {}

    public function ready() {

        if(!$this->status) return;

        // don't render in formbuilder iframe
        if($this->wire('page')->template == 'form-builder') return;

        // stop here in backend except on this module's config page (for demonstration)
        if($this->wire('page')->template == 'admin' && $this->wire('input')->get->name != $this) return;

        if($this->eu_visitors_only) {
            $this->auto_fire = 'false';
            if(!$this->wire('session')->userFromEu) {
                $http = new WireHttp();

                if($this->wire('page')->template == 'admin' && $this->wire('input')->get->name == $this) {
                    $ipAddress = $this->ip_test ?: '';
                }
                else {
                    $ipAddress = '';
                }

                foreach($this->ip_country_service as $ipService) {
                    if($ipService == 'ip.nf') {
                        // supports IPv6 but their server only supports 40 req/s which I worry might be an issue in the future?
                        $userLocation = $http->getJSON('https://ip.nf/' . ($ipAddress != '' ? $ipAddress : 'me') . '.json');
                        if(!isset($userLocation['ip']['country_code']) || $userLocation['ip']['country_code'] == '') continue;
                        $countryInfo = $http->getJSON('https://restcountries.eu/rest/v2/alpha/'.$userLocation['ip']['country_code'].'?fields=regionalBlocs');
                    }
                    if($ipService == 'geoip.nekudo.com') {
                        // no limit service that supports IPv4 and IPv6
                        $userLocation = $http->getJSON('https://geoip.nekudo.com/api/'.$ipAddress);
                        if(!isset($userLocation['country']['code']) || $userLocation['country']['code'] == '') continue;
                        $countryInfo = $http->getJSON('https://restcountries.eu/rest/v2/alpha/'.$userLocation['country']['code'].'?fields=regionalBlocs');
                    }
                    if($ipService == 'ip.sb') {
                        // no info provided on limits
                        $userLocation = $http->getJSON('https://api.ip.sb/geoip/'.$ipAddress);
                        if(!isset($userLocation['country_code']) || $userLocation['country_code'] == '') continue;
                        $countryInfo = $http->getJSON('https://restcountries.eu/rest/v2/alpha/'.$userLocation['country_code'].'?fields=regionalBlocs');
                    }
                    if(isset($countryInfo['regionalBlocs']) && $countryInfo['regionalBlocs'] != '') {
                        $this->usedService = $ipService;
                        break;
                    }
                }


                if(isset($countryInfo['regionalBlocs']) && $countryInfo['regionalBlocs'] != '' && $this->hasEuBloc($countryInfo['regionalBlocs'])) {
                    $this->wire('session')->userFromEu = 'true';
                }
                else {
                    $this->wire('session')->userFromEu = 'false';
                }

                if($this->wire('modules')->isInstalled('TracyDebugger') && method_exists('\TD', 'barDump')) {
                    \TD::barDump($userLocation, 'User Location from: '. $this->usedService);
                    \TD::barDump($countryInfo, 'From EU Test: ' . $this->wire('session')->userFromEu);
                }

            }
            if($this->wire('session')->userFromEu != 'true') {
                $this->auto_fire = 'true';
            }

        }

        $this->addHookAfter('Page::render', null, function(HookEvent $event) {

            // get user language to determine what language to output banner text in
            if($this->wire('languages')) {
                $userLanguage = $this->wire('user')->language;
                $lang = $userLanguage->isDefault() ? '' : "__$userLanguage->id";
            }
            else {
                $lang = '';
            }

            // inject assets and banner tpl files
            $moduleUrl = $this->wire('config')->urls->$this;
            // we don't need to load the tpl or css files if the user isn't potentially going to see the banner
            if(!$this->eu_visitors_only || ($this->eu_visitors_only && $this->wire('session')->userFromEu == 'true')) {
                $cookieBanner = wireRenderFile($this->wire('config')->paths->$this.'wrapper.tpl.php', array('module' => $this, 'lang' => $lang));
                if($this->autoload_assets) $event->return = $this->str_replace_once("<link ", "<link rel='stylesheet' type='text/css' href='{$moduleUrl}assets/css/{$this}.css' />\n<link ", $event->return);
            }
            else {
                $cookieBanner = '';
            }
            // we still need the js file regardless of whether they will see the banner or not so that we can auto_fire
            // the tracking beacon for Google Tag Manager and the dataLayer variable
            $jsVars = '
            <script>
                var pwcmb_settings = {
                    status: "'.$this->status.'",
                    version: "'.$this->version.'",
                    auto_accept: "'.$this->auto_accept.'",
                    auto_fire: "'.$this->auto_fire.'"
                };
            </script>
            ';
            $jsFilename = $this->js_version == 'jquery' ? $this : $this . '.vanilla';
            bd($jsFilename);
            $jsFile = $this->autoload_assets ? "<script defer src='{$moduleUrl}assets/js/{$jsFilename}.js'></script>" : "";
            $event->return = str_replace("</body>", "{$cookieBanner}{$jsVars}{$jsFile}</body>", $event->return);

        });

        // remove userFromEU session variable when saving the module config settings page
        // makes it easier to use the IP Address Test field
        $this->wire('modules')->addHookAfter('saveModuleConfigData', null, function($event) {
            if($event->arguments[0] != $this) return;
            $this->wire('session')->remove('userFromEu');
        });

    }


    // determine if return regionalBlocs array contains EU
    private function hasEuBloc($array) {
        foreach($array as $item) {
            if($item['acronym'] === 'EU') {
                return true;
            }
        }
       return false;
    }

    // replace once helper
    private function str_replace_once($needle, $replacement, $haystack) {
        $pos = strpos($haystack, $needle);
        if($pos !== false) {
            $haystack = substr_replace($haystack, $replacement, $pos, strlen($needle));
        }
        return $haystack;
    }

}
